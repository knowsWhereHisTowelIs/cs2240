/**
* Who: Caleb Slater
* What: A5
* When: 2015-10-31
* Where: CS 2240
* How: "$./a.out"
* Memory play
**/

#include "shell.h"

int main(int argc, char *argv[]) {
    int numOfChars = -1;
    char **chars;
    numOfChars = makeargv(char * s, char * delimiters, &chars);
    int fd[2]; // an int array to be used by the pipe system call
    pid_t pid; // the universal process id variable

    if (pipe(fd) == -1)
        err_sys("pipe error");
    if ((pid = fork()) < 0)
        err_sys("forked badly");

    // child
    if (pid == 0) {
        close(fd[0]); // won't be reading pipe

        write(fd[1], "some characters", 15); //some piped letters
        fd[1] = dup2(fd[1], STDOUT_FILENO); // this process' Standard Out
        write(1, " after dup2 stuff", 021);
        close(fd[0]);
        write(1, "after stuff", 5);
        execlp("/bin/ls", "ls", "-l", (void * ) 0);
        write(1, "ls failed\n", 10);
        // is now piped
        // and finally child becomes ls
    }

    // Parent
    if (pid > 0) {
        close(fd[1]); // no write to pipe here
        fd[0] = dup2(fd[0], STDIN_FILENO);
        write(STDOUT_FILENO, "parent", 6); // message to stdout
        // This turns parent into Upcaser
        execlp("./Upcase", "Upcase", NULL); // your code might have something like
        // execvp(argvp[place], &argvp[place]) where
        // you have modified argvp array with NULL
        // in appropriate places (like where the | is)
    }

    return 0;
}
